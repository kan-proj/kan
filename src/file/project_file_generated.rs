// automatically generated by the FlatBuffers compiler, do not modify


// @generated

use core::mem;
use core::cmp::Ordering;

extern crate flatbuffers;
use self::flatbuffers::{EndianScalar, Follow};

#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
pub const ENUM_MIN_VERSION: i8 = 0;
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
pub const ENUM_MAX_VERSION: i8 = 0;
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
#[allow(non_camel_case_types)]
pub const ENUM_VALUES_VERSION: [Version; 1] = [
  Version::Zero,
];

#[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Default)]
#[repr(transparent)]
pub struct Version(pub i8);
#[allow(non_upper_case_globals)]
impl Version {
  pub const Zero: Self = Self(0);

  pub const ENUM_MIN: i8 = 0;
  pub const ENUM_MAX: i8 = 0;
  pub const ENUM_VALUES: &'static [Self] = &[
    Self::Zero,
  ];
  /// Returns the variant's name or "" if unknown.
  pub fn variant_name(self) -> Option<&'static str> {
    match self {
      Self::Zero => Some("Zero"),
      _ => None,
    }
  }
}
impl core::fmt::Debug for Version {
  fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
    if let Some(name) = self.variant_name() {
      f.write_str(name)
    } else {
      f.write_fmt(format_args!("<UNKNOWN {:?}>", self.0))
    }
  }
}
impl<'a> flatbuffers::Follow<'a> for Version {
  type Inner = Self;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    let b = flatbuffers::read_scalar_at::<i8>(buf, loc);
    Self(b)
  }
}

impl flatbuffers::Push for Version {
    type Output = Version;
    #[inline]
    unsafe fn push(&self, dst: &mut [u8], _written_len: usize) {
        flatbuffers::emplace_scalar::<i8>(dst, self.0);
    }
}

impl flatbuffers::EndianScalar for Version {
  type Scalar = i8;
  #[inline]
  fn to_little_endian(self) -> i8 {
    self.0.to_le()
  }
  #[inline]
  #[allow(clippy::wrong_self_convention)]
  fn from_little_endian(v: i8) -> Self {
    let b = i8::from_le(v);
    Self(b)
  }
}

impl<'a> flatbuffers::Verifiable for Version {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    i8::run_verifier(v, pos)
  }
}

impl flatbuffers::SimpleToVerifyInSlice for Version {}
pub enum AuthorOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct Author<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for Author<'a> {
  type Inner = Author<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> Author<'a> {
  pub const VT_ID: flatbuffers::VOffsetT = 4;
  pub const VT_NAME: flatbuffers::VOffsetT = 6;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    Author { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
    args: &'args AuthorArgs<'args>
  ) -> flatbuffers::WIPOffset<Author<'bldr>> {
    let mut builder = AuthorBuilder::new(_fbb);
    builder.add_id(args.id);
    if let Some(x) = args.name { builder.add_name(x); }
    builder.finish()
  }


  #[inline]
  pub fn id(&self) -> u64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<u64>(Author::VT_ID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn name(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(Author::VT_NAME, None)}
  }
}

impl flatbuffers::Verifiable for Author<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<u64>("id", Self::VT_ID, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("name", Self::VT_NAME, false)?
     .finish();
    Ok(())
  }
}
pub struct AuthorArgs<'a> {
    pub id: u64,
    pub name: Option<flatbuffers::WIPOffset<&'a str>>,
}
impl<'a> Default for AuthorArgs<'a> {
  #[inline]
  fn default() -> Self {
    AuthorArgs {
      id: 0,
      name: None,
    }
  }
}

pub struct AuthorBuilder<'a: 'b, 'b> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b> AuthorBuilder<'a, 'b> {
  #[inline]
  pub fn add_id(&mut self, id: u64) {
    self.fbb_.push_slot::<u64>(Author::VT_ID, id, 0);
  }
  #[inline]
  pub fn add_name(&mut self, name: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Author::VT_NAME, name);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>) -> AuthorBuilder<'a, 'b> {
    let start = _fbb.start_table();
    AuthorBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<Author<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for Author<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("Author");
      ds.field("id", &self.id());
      ds.field("name", &self.name());
      ds.finish()
  }
}
pub enum ContentOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct Content<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for Content<'a> {
  type Inner = Content<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> Content<'a> {
  pub const VT_CATEGORY: flatbuffers::VOffsetT = 4;
  pub const VT_OBJECTS: flatbuffers::VOffsetT = 6;
  pub const VT_ARROWS: flatbuffers::VOffsetT = 8;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    Content { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
    args: &'args ContentArgs<'args>
  ) -> flatbuffers::WIPOffset<Content<'bldr>> {
    let mut builder = ContentBuilder::new(_fbb);
    if let Some(x) = args.arrows { builder.add_arrows(x); }
    if let Some(x) = args.objects { builder.add_objects(x); }
    if let Some(x) = args.category { builder.add_category(x); }
    builder.finish()
  }


  #[inline]
  pub fn category(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(Content::VT_CATEGORY, None)}
  }
  #[inline]
  pub fn objects(&self) -> Option<flatbuffers::Vector<'a, u64>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, u64>>>(Content::VT_OBJECTS, None)}
  }
  #[inline]
  pub fn arrows(&self) -> Option<flatbuffers::Vector<'a, u64>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, u64>>>(Content::VT_ARROWS, None)}
  }
}

impl flatbuffers::Verifiable for Content<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("category", Self::VT_CATEGORY, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, u64>>>("objects", Self::VT_OBJECTS, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, u64>>>("arrows", Self::VT_ARROWS, false)?
     .finish();
    Ok(())
  }
}
pub struct ContentArgs<'a> {
    pub category: Option<flatbuffers::WIPOffset<&'a str>>,
    pub objects: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, u64>>>,
    pub arrows: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, u64>>>,
}
impl<'a> Default for ContentArgs<'a> {
  #[inline]
  fn default() -> Self {
    ContentArgs {
      category: None,
      objects: None,
      arrows: None,
    }
  }
}

pub struct ContentBuilder<'a: 'b, 'b> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b> ContentBuilder<'a, 'b> {
  #[inline]
  pub fn add_category(&mut self, category: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Content::VT_CATEGORY, category);
  }
  #[inline]
  pub fn add_objects(&mut self, objects: flatbuffers::WIPOffset<flatbuffers::Vector<'b , u64>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Content::VT_OBJECTS, objects);
  }
  #[inline]
  pub fn add_arrows(&mut self, arrows: flatbuffers::WIPOffset<flatbuffers::Vector<'b , u64>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Content::VT_ARROWS, arrows);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>) -> ContentBuilder<'a, 'b> {
    let start = _fbb.start_table();
    ContentBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<Content<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for Content<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("Content");
      ds.field("category", &self.category());
      ds.field("objects", &self.objects());
      ds.field("arrows", &self.arrows());
      ds.finish()
  }
}
pub enum OperationOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct Operation<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for Operation<'a> {
  type Inner = Operation<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> Operation<'a> {
  pub const VT_AUTHOR: flatbuffers::VOffsetT = 4;
  pub const VT_CONTENT: flatbuffers::VOffsetT = 6;
  pub const VT_TIMESTAMP: flatbuffers::VOffsetT = 8;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    Operation { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
    args: &'args OperationArgs<'args>
  ) -> flatbuffers::WIPOffset<Operation<'bldr>> {
    let mut builder = OperationBuilder::new(_fbb);
    builder.add_timestamp(args.timestamp);
    if let Some(x) = args.content { builder.add_content(x); }
    if let Some(x) = args.author { builder.add_author(x); }
    builder.finish()
  }


  #[inline]
  pub fn author(&self) -> Option<Author<'a>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<Author>>(Operation::VT_AUTHOR, None)}
  }
  #[inline]
  pub fn content(&self) -> Option<Content<'a>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<Content>>(Operation::VT_CONTENT, None)}
  }
  #[inline]
  pub fn timestamp(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(Operation::VT_TIMESTAMP, Some(0)).unwrap()}
  }
}

impl flatbuffers::Verifiable for Operation<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<flatbuffers::ForwardsUOffset<Author>>("author", Self::VT_AUTHOR, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<Content>>("content", Self::VT_CONTENT, false)?
     .visit_field::<i64>("timestamp", Self::VT_TIMESTAMP, false)?
     .finish();
    Ok(())
  }
}
pub struct OperationArgs<'a> {
    pub author: Option<flatbuffers::WIPOffset<Author<'a>>>,
    pub content: Option<flatbuffers::WIPOffset<Content<'a>>>,
    pub timestamp: i64,
}
impl<'a> Default for OperationArgs<'a> {
  #[inline]
  fn default() -> Self {
    OperationArgs {
      author: None,
      content: None,
      timestamp: 0,
    }
  }
}

pub struct OperationBuilder<'a: 'b, 'b> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b> OperationBuilder<'a, 'b> {
  #[inline]
  pub fn add_author(&mut self, author: flatbuffers::WIPOffset<Author<'b >>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<Author>>(Operation::VT_AUTHOR, author);
  }
  #[inline]
  pub fn add_content(&mut self, content: flatbuffers::WIPOffset<Content<'b >>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<Content>>(Operation::VT_CONTENT, content);
  }
  #[inline]
  pub fn add_timestamp(&mut self, timestamp: i64) {
    self.fbb_.push_slot::<i64>(Operation::VT_TIMESTAMP, timestamp, 0);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>) -> OperationBuilder<'a, 'b> {
    let start = _fbb.start_table();
    OperationBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<Operation<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for Operation<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("Operation");
      ds.field("author", &self.author());
      ds.field("content", &self.content());
      ds.field("timestamp", &self.timestamp());
      ds.finish()
  }
}
pub enum ProjectFileOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct ProjectFile<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for ProjectFile<'a> {
  type Inner = ProjectFile<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> ProjectFile<'a> {
  pub const VT_VERSION: flatbuffers::VOffsetT = 4;
  pub const VT_OPERATIONS: flatbuffers::VOffsetT = 6;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    ProjectFile { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
    args: &'args ProjectFileArgs<'args>
  ) -> flatbuffers::WIPOffset<ProjectFile<'bldr>> {
    let mut builder = ProjectFileBuilder::new(_fbb);
    if let Some(x) = args.operations { builder.add_operations(x); }
    builder.add_version(args.version);
    builder.finish()
  }


  #[inline]
  pub fn version(&self) -> Version {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<Version>(ProjectFile::VT_VERSION, Some(Version::Zero)).unwrap()}
  }
  #[inline]
  pub fn operations(&self) -> Option<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<Operation<'a>>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<Operation>>>>(ProjectFile::VT_OPERATIONS, None)}
  }
}

impl flatbuffers::Verifiable for ProjectFile<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<Version>("version", Self::VT_VERSION, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<Operation>>>>("operations", Self::VT_OPERATIONS, false)?
     .finish();
    Ok(())
  }
}
pub struct ProjectFileArgs<'a> {
    pub version: Version,
    pub operations: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<Operation<'a>>>>>,
}
impl<'a> Default for ProjectFileArgs<'a> {
  #[inline]
  fn default() -> Self {
    ProjectFileArgs {
      version: Version::Zero,
      operations: None,
    }
  }
}

pub struct ProjectFileBuilder<'a: 'b, 'b> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b> ProjectFileBuilder<'a, 'b> {
  #[inline]
  pub fn add_version(&mut self, version: Version) {
    self.fbb_.push_slot::<Version>(ProjectFile::VT_VERSION, version, Version::Zero);
  }
  #[inline]
  pub fn add_operations(&mut self, operations: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<Operation<'b >>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(ProjectFile::VT_OPERATIONS, operations);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>) -> ProjectFileBuilder<'a, 'b> {
    let start = _fbb.start_table();
    ProjectFileBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<ProjectFile<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for ProjectFile<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("ProjectFile");
      ds.field("version", &self.version());
      ds.field("operations", &self.operations());
      ds.finish()
  }
}
#[inline]
/// Verifies that a buffer of bytes contains a `ProjectFile`
/// and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_project_file_unchecked`.
pub fn root_as_project_file(buf: &[u8]) -> Result<ProjectFile, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root::<ProjectFile>(buf)
}
#[inline]
/// Verifies that a buffer of bytes contains a size prefixed
/// `ProjectFile` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `size_prefixed_root_as_project_file_unchecked`.
pub fn size_prefixed_root_as_project_file(buf: &[u8]) -> Result<ProjectFile, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root::<ProjectFile>(buf)
}
#[inline]
/// Verifies, with the given options, that a buffer of bytes
/// contains a `ProjectFile` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_project_file_unchecked`.
pub fn root_as_project_file_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<ProjectFile<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root_with_opts::<ProjectFile<'b>>(opts, buf)
}
#[inline]
/// Verifies, with the given verifier options, that a buffer of
/// bytes contains a size prefixed `ProjectFile` and returns
/// it. Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_project_file_unchecked`.
pub fn size_prefixed_root_as_project_file_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<ProjectFile<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root_with_opts::<ProjectFile<'b>>(opts, buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a ProjectFile and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid `ProjectFile`.
pub unsafe fn root_as_project_file_unchecked(buf: &[u8]) -> ProjectFile {
  flatbuffers::root_unchecked::<ProjectFile>(buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a size prefixed ProjectFile and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid size prefixed `ProjectFile`.
pub unsafe fn size_prefixed_root_as_project_file_unchecked(buf: &[u8]) -> ProjectFile {
  flatbuffers::size_prefixed_root_unchecked::<ProjectFile>(buf)
}
#[inline]
pub fn finish_project_file_buffer<'a, 'b>(
    fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>,
    root: flatbuffers::WIPOffset<ProjectFile<'a>>) {
  fbb.finish(root, None);
}

#[inline]
pub fn finish_size_prefixed_project_file_buffer<'a, 'b>(fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>, root: flatbuffers::WIPOffset<ProjectFile<'a>>) {
  fbb.finish_size_prefixed(root, None);
}
